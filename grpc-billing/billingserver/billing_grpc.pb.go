// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package billingserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingClient is the client API for Billing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingClient interface {
	SubscriptionCost(ctx context.Context, opts ...grpc.CallOption) (Billing_SubscriptionCostClient, error)
}

type billingClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingClient(cc grpc.ClientConnInterface) BillingClient {
	return &billingClient{cc}
}

func (c *billingClient) SubscriptionCost(ctx context.Context, opts ...grpc.CallOption) (Billing_SubscriptionCostClient, error) {
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[0], "/billingserver.Billing/subscriptionCost", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingSubscriptionCostClient{stream}
	return x, nil
}

type Billing_SubscriptionCostClient interface {
	Send(*CostUsageRequest) error
	Recv() (*CostUsageResponse, error)
	grpc.ClientStream
}

type billingSubscriptionCostClient struct {
	grpc.ClientStream
}

func (x *billingSubscriptionCostClient) Send(m *CostUsageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *billingSubscriptionCostClient) Recv() (*CostUsageResponse, error) {
	m := new(CostUsageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BillingServer is the server API for Billing service.
// All implementations must embed UnimplementedBillingServer
// for forward compatibility
type BillingServer interface {
	SubscriptionCost(Billing_SubscriptionCostServer) error
	mustEmbedUnimplementedBillingServer()
}

// UnimplementedBillingServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServer struct {
}

func (UnimplementedBillingServer) SubscriptionCost(Billing_SubscriptionCostServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscriptionCost not implemented")
}
func (UnimplementedBillingServer) mustEmbedUnimplementedBillingServer() {}

// UnsafeBillingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServer will
// result in compilation errors.
type UnsafeBillingServer interface {
	mustEmbedUnimplementedBillingServer()
}

func RegisterBillingServer(s grpc.ServiceRegistrar, srv BillingServer) {
	s.RegisterService(&Billing_ServiceDesc, srv)
}

func _Billing_SubscriptionCost_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BillingServer).SubscriptionCost(&billingSubscriptionCostServer{stream})
}

type Billing_SubscriptionCostServer interface {
	Send(*CostUsageResponse) error
	Recv() (*CostUsageRequest, error)
	grpc.ServerStream
}

type billingSubscriptionCostServer struct {
	grpc.ServerStream
}

func (x *billingSubscriptionCostServer) Send(m *CostUsageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *billingSubscriptionCostServer) Recv() (*CostUsageRequest, error) {
	m := new(CostUsageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Billing_ServiceDesc is the grpc.ServiceDesc for Billing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Billing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billingserver.Billing",
	HandlerType: (*BillingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscriptionCost",
			Handler:       _Billing_SubscriptionCost_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "billingserver/billing.proto",
}
